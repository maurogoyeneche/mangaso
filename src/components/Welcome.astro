---
import astroLogo from "../assets/astro.svg";
import background from "../assets/background.svg";

interface Props {
  nombre?: string;
}

const { nombre } = Astro.props;
---

<!-- Meta tag para pasar el nombre al JavaScript -->
<meta name="astro-nombre" content={nombre || "Amigo"} />

<div id="container">
  <img id="background" src={background.src} alt="" fetchpriority="high" />
  <main>
    <section id="hero">
      <h1 id="titulo">Amigo, me prestás $500 pesos?</h1>
      <section class="button-container">
        <button class="button si" onclick="showCelebration()">Si</button>
        <button class="button" id="no-button" onclick="handleClick()">No</button
        >
      </section>
    </section>
  </main>

  <!-- Modal de celebración -->
  <div id="celebration-modal" class="modal hidden">
    <div class="modal-content">
      <div class="modal-header">
        <h2 id="modal-titulo">🎉 ¡FELICITACIONES! 🎉</h2>
      </div>
      <div class="celebration-text">
        <p>¡Sabía que me ibas a decir que sí!</p>
        <p id="modal-texto">¡Eres el mejor amigo del mundo! 💰</p>
        <p class="money-text">Los $500 pesos están en buenas manos 🤝</p>
      </div>
      <div class="emoji-rain">
        <span style="--i: 0">🎉</span>
        <span style="--i: 1">💰</span>
        <span style="--i: 2">🎊</span>
        <span style="--i: 3">🤑</span>
        <span style="--i: 4">💸</span>
        <span style="--i: 5">🎉</span>
        <span style="--i: 6">💰</span>
        <span style="--i: 7">🎊</span>
        <span style="--i: 8">🤑</span>
        <span style="--i: 9">💸</span>
      </div>
      <button
        class="button close-btn"
        id="modal-boton"
        onclick="closeCelebration()"
      >
        ¡Gracias! 🙏
      </button>
    </div>
  </div>
</div>

<script
  src="https://cdn.jsdelivr.net/npm/canvas-confetti@1.9.2/dist/confetti.browser.min.js"
></script>
<script src="https://cdn.jsdelivr.net/npm/howler@2.2.4/dist/howler.min.js"
></script>

<script is:inline>
  // Variables globales para el nombre
  let nombreUsuario = "Amigo";
  let nombreCapitalizado = "Amigo";

  // Inicializar la página con el nombre pasado como prop
  function initializePage() {
    // Verificar si hay un nombre pasado desde Astro
    const astroNombre = document.querySelector(
      'meta[name="astro-nombre"]'
    )?.content;

    if (astroNombre && astroNombre !== "Amigo") {
      nombreUsuario = astroNombre;
    } else {
      // Fallback: obtener de la URL como antes
      const path = window.location.pathname;
      const urlParams = new URLSearchParams(window.location.search);

      const segments = path.split("/").filter((segment) => segment.length > 0);

      if (segments.length > 0 && segments[0] !== "index.html") {
        nombreUsuario = segments[0];
      } else if (urlParams.has("nombre")) {
        nombreUsuario = urlParams.get("nombre");
      }
    }

    nombreCapitalizado =
      nombreUsuario.charAt(0).toUpperCase() +
      nombreUsuario.slice(1).toLowerCase();

    // Actualizar el título de la página
    document.title = `¿Me prestás $500? - ${nombreCapitalizado}`;

    // Actualizar el contenido dinámico
    updateContent();
  }

  function updateContent() {
    // Actualizar título principal
    const titulo = document.getElementById("titulo");
    if (titulo) {
      titulo.textContent = `${nombreCapitalizado}, me prestás $500 pesos?`;
    }

    // Actualizar título del modal
    const modalTitulo = document.getElementById("modal-titulo");
    if (modalTitulo) {
      modalTitulo.textContent = `🎉 ¡FELICITACIONES ${nombreCapitalizado.toUpperCase()}! 🎉`;
    }

    // Actualizar texto del modal
    const modalTexto = document.getElementById("modal-texto");
    if (modalTexto) {
      modalTexto.textContent = `¡Eres el mejor amigo del mundo, ${nombreCapitalizado}! 💰`;
    }

    // Actualizar botón del modal
    const modalBoton = document.getElementById("modal-boton");
    if (modalBoton) {
      modalBoton.textContent = `¡Gracias ${nombreCapitalizado}! 🙏`;
    }
  }

  // Ejecutar cuando el DOM esté listo
  document.addEventListener("DOMContentLoaded", initializePage);

  function handleClick() {
    const noButton = document.getElementById("no-button");
    const container = document.getElementById("container");

    if (noButton && container) {
      const maxX = container.offsetWidth - noButton.offsetWidth;
      const maxY = container.offsetHeight - noButton.offsetHeight;

      const randomX = Math.random() * Math.max(0, maxX);
      const randomY = Math.random() * Math.max(0, maxY);

      noButton.style.position = "absolute";
      noButton.style.left = randomX + "px";
      noButton.style.top = randomY + "px";
      noButton.style.zIndex = "1000";

      console.log("Botón movido a:", randomX, randomY);
    }
  }

  function showCelebration() {
    const modal = document.getElementById("celebration-modal");
    modal.classList.remove("hidden");

    // Reproducir sonido de aplausos
    playApplauseSound();

    // Iniciar confetti con la librería
    startConfetti();

    // Animar emojis
    animateEmojis();
  }

  function closeCelebration() {
    const modal = document.getElementById("celebration-modal");
    modal.classList.add("hidden");
  }

  function playApplauseSound() {
    // Primero intentar con sonidos más confiables
    try {
      // Usar sonidos de freesound.org que son más estables
      const applause = new Howl({
        src: [
          "https://www.soundjay.com/misc/sounds/applause-4.wav",
          "https://www.zapsplat.com/wp-content/uploads/2015/sound-effects-one/misc_applause_medium_01.mp3",
        ],
        volume: 0.8,
        html5: true, // Forzar HTML5 Audio para mejor compatibilidad
        onplay: function () {
          console.log("✅ Aplausos reproduciéndose con Howler!");
        },
        onloaderror: function (error) {
          console.log("❌ Error cargando audio externo:", error);
          playFallbackApplause();
        },
        onplayerror: function (error) {
          console.log("❌ Error reproduciendo audio:", error);
          playFallbackApplause();
        },
      });

      applause.play();
    } catch (error) {
      console.log("❌ Error con Howler, usando fallback inmediatamente");
      playFallbackApplause();
    }

    // Siempre ejecutar fallback como backup después de 500ms
    setTimeout(() => {
      console.log("🔄 Ejecutando fallback como respaldo");
      playFallbackApplause();
    }, 500);
  }

  function playFallbackApplause() {
    console.log("🎵 Iniciando audio fallback (Web Audio API)");

    try {
      const audioContext = new (window.AudioContext ||
        window.webkitAudioContext)();

      // Sonido de aplausos más simple pero efectivo
      const duration = 2;
      const sampleRate = audioContext.sampleRate;
      const frameCount = sampleRate * duration;
      const arrayBuffer = audioContext.createBuffer(2, frameCount, sampleRate);

      for (let channel = 0; channel < 2; channel++) {
        const channelData = arrayBuffer.getChannelData(channel);

        for (let i = 0; i < frameCount; i++) {
          const t = i / sampleRate;

          // Crear patrones de aplauso más intensos
          const clap1 = Math.sin(t * 200) * Math.exp(-t * 3);
          const clap2 = Math.sin(t * 400) * Math.exp(-t * 2);
          const clap3 = Math.sin(t * 100) * Math.exp(-t * 1.5);

          // Ruido blanco para textura
          const noise = (Math.random() * 2 - 1) * 0.3;

          // Envelope para hacer pulsos de aplauso
          const envelope = Math.sin(t * 8) * Math.exp(-t * 1.2);

          // Combinar todo
          const signal = (clap1 + clap2 + clap3 + noise) * envelope * 0.4;

          channelData[i] = signal;
        }
      }

      const source = audioContext.createBufferSource();
      source.buffer = arrayBuffer;

      // Agregar compresión para hacer el sonido más fuerte
      const compressor = audioContext.createDynamicsCompressor();
      compressor.threshold.value = -24;
      compressor.knee.value = 30;
      compressor.ratio.value = 12;
      compressor.attack.value = 0.003;
      compressor.release.value = 0.25;

      const gainNode = audioContext.createGain();
      gainNode.gain.value = 0.8;

      source.connect(compressor);
      compressor.connect(gainNode);
      gainNode.connect(audioContext.destination);

      source.start();
      console.log("✅ Audio fallback reproduciéndose");

      // Segundo aplauso después de 1 segundo
      setTimeout(() => {
        const source2 = audioContext.createBufferSource();
        source2.buffer = arrayBuffer;
        source2.connect(gainNode);
        source2.start();
        console.log("✅ Segundo aplauso fallback");
      }, 1000);
    } catch (error) {
      console.log("❌ Error total con audio:", error);
      // Última opción: beep del sistema
      try {
        // Crear un beep simple
        const audioContext = new (window.AudioContext ||
          window.webkitAudioContext)();
        const oscillator = audioContext.createOscillator();
        const gainNode = audioContext.createGain();

        oscillator.connect(gainNode);
        gainNode.connect(audioContext.destination);

        oscillator.frequency.value = 800;
        oscillator.type = "triangle";

        gainNode.gain.setValueAtTime(0, audioContext.currentTime);
        gainNode.gain.linearRampToValueAtTime(
          0.3,
          audioContext.currentTime + 0.1
        );
        gainNode.gain.exponentialRampToValueAtTime(
          0.01,
          audioContext.currentTime + 0.5
        );

        oscillator.start(audioContext.currentTime);
        oscillator.stop(audioContext.currentTime + 0.5);

        console.log("✅ Beep de celebración como último recurso");
      } catch (beepError) {
        console.log("❌ No se pudo reproducir ningún sonido:", beepError);
      }
    }
  }

  function animateEmojis() {
    const emojiRain = document.querySelector(".emoji-rain");
    emojiRain.style.animation = "emojiDrop 3s ease-in-out infinite";
  }

  function startConfetti() {
    // Confetti inicial desde el centro
    confetti({
      particleCount: 100,
      spread: 70,
      origin: { y: 0.6 },
    });

    // Confetti dorado desde la izquierda
    setTimeout(() => {
      confetti({
        particleCount: 50,
        angle: 60,
        spread: 55,
        origin: { x: 0 },
        colors: ["#FFD700", "#FFA500", "#FF8C00"],
      });
    }, 200);

    // Confetti colorido desde la derecha
    setTimeout(() => {
      confetti({
        particleCount: 50,
        angle: 120,
        spread: 55,
        origin: { x: 1 },
        colors: ["#FF6B6B", "#4ECDC4", "#45B7D1", "#96CEB4", "#FECA57"],
      });
    }, 400);

    // Confetti continuo por 3 segundos
    const duration = 3000;
    const animationEnd = Date.now() + duration;
    const randomInRange = (min, max) => Math.random() * (max - min) + min;

    const interval = setInterval(() => {
      const timeLeft = animationEnd - Date.now();

      if (timeLeft <= 0) {
        clearInterval(interval);
        return;
      }

      const particleCount = 50 * (timeLeft / duration);

      confetti({
        particleCount,
        startVelocity: randomInRange(50, 100),
        spread: randomInRange(50, 100),
        origin: {
          x: randomInRange(0.1, 0.9),
          y: Math.random() - 0.2,
        },
        colors: [
          "#FFD700",
          "#FF6B6B",
          "#4ECDC4",
          "#45B7D1",
          "#96CEB4",
          "#FECA57",
          "#FF9FF3",
        ],
      });
    }, 250);
  }
</script>

<style>
  #background {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: -1;
    filter: blur(100px);
  }

  #container {
    font-family: Inter, Roboto, "Helvetica Neue", "Arial Nova", "Nimbus Sans",
      Arial, sans-serif;
    height: 100%;
  }

  main {
    height: 100%;
    display: flex;
    justify-content: center;
  }

  #hero {
    display: flex;
    align-items: start;
    flex-direction: column;
    justify-content: center;
    padding: 16px;
    max-width: 600px;
    width: 100%;
    margin: 0 auto;
  }

  h1 {
    font-size: 22px;
    margin-top: 0.25em;
    color: #111827;
    text-align: center;
    width: 100%;
  }

  .button-container {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 16px;
    width: 100%;
    flex-direction: column;
  }

  .button {
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 16px 24px;
    color: #111827;
    text-decoration: none;
    transition: color 0.2s;
    border: none;
    cursor: pointer;
    border-radius: 8px;
    background: #f3f4f6;
    width: 100%;
    max-width: 90%;
    font-size: 18px;
    font-weight: 500;
    min-height: 60px;
  }

  .button:hover {
    color: rgb(78, 80, 86);
    background: #e5e7eb;
  }

  .button.si {
    color: white;
    background: linear-gradient(83.21deg, #3245ff 0%, #bc52ee 100%);
    box-shadow:
      inset 0 0 0 1px rgba(255, 255, 255, 0.12),
      inset 0 -2px 0 rgba(0, 0, 0, 0.24);
    border-radius: 10px;
  }

  .button.si:hover {
    color: rgb(230, 230, 230);
    box-shadow: none;
  }

  /* Estilos del modal */
  .modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.8);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 10000;
    backdrop-filter: blur(5px);
  }

  .modal.hidden {
    display: none;
  }

  .modal-content {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    padding: 40px;
    border-radius: 20px;
    text-align: center;
    max-width: 500px;
    width: 90%;
    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
    animation: modalBounce 0.5s ease-out;
    position: relative;
    overflow: hidden;
  }

  .modal-header h2 {
    color: white;
    font-size: 28px;
    margin: 0 0 20px 0;
    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
    animation: glow 2s ease-in-out infinite alternate;
  }

  .celebration-text p {
    color: white;
    font-size: 18px;
    margin: 15px 0;
    text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.3);
  }

  .money-text {
    font-weight: bold;
    font-size: 20px !important;
    color: #ffd700;
    text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
  }

  .emoji-rain {
    display: flex;
    justify-content: space-around;
    margin: 20px 0;
    overflow: hidden;
  }

  .emoji-rain span {
    font-size: 30px;
    animation: emojiDrop 3s ease-in-out infinite;
    animation-delay: calc(var(--i) * 0.2s);
  }

  .close-btn {
    margin-top: 20px;
    font-weight: bold;
    transition: transform 0.2s;
  }

  .close-btn:hover {
    transform: scale(1.05);
  }

  /* Animaciones */
  @keyframes modalBounce {
    0% {
      transform: scale(0.3) rotate(-10deg);
      opacity: 0;
    }
    50% {
      transform: scale(1.05) rotate(2deg);
    }
    100% {
      transform: scale(1) rotate(0deg);
      opacity: 1;
    }
  }

  @keyframes glow {
    from {
      text-shadow:
        2px 2px 4px rgba(0, 0, 0, 0.3),
        0 0 10px rgba(255, 255, 255, 0.5);
    }
    to {
      text-shadow:
        2px 2px 4px rgba(0, 0, 0, 0.3),
        0 0 20px rgba(255, 255, 255, 0.8),
        0 0 30px rgba(255, 215, 0, 0.6);
    }
  }

  @keyframes emojiDrop {
    0% {
      transform: translateY(-20px) rotate(0deg);
      opacity: 0;
    }
    50% {
      transform: translateY(10px) rotate(180deg);
      opacity: 1;
    }
    100% {
      transform: translateY(-5px) rotate(360deg);
      opacity: 0.8;
    }
  }

  @media screen and (max-width: 768px) {
    #container {
      display: flex;
      flex-direction: column;
      padding: 20px;
    }

    #hero {
      display: flex;
      flex-direction: column;
      align-items: center;
      padding: 20px;
      gap: 20px;
    }

    h1 {
      line-height: 1.5;
      font-size: 24px;
      text-align: center;
      margin-bottom: 20px;
    }

    .button-container {
      flex-direction: column;
      gap: 12px;
      width: 100%;
    }

    .button {
      width: 100%;
      max-width: 90%;
      padding: 18px 24px;
      font-size: 16px;
      min-height: 56px;
      border-radius: 12px;
    }

    .modal-content {
      padding: 30px 20px;
      margin: 20px;
      width: calc(100% - 40px);
      max-width: none;
    }

    .modal-header h2 {
      font-size: 24px;
    }

    .celebration-text p {
      font-size: 16px;
    }
  }

  @media screen and (min-width: 769px) {
    .button-container {
      flex-direction: row;
      gap: 20px;
      justify-content: center;
      max-width: 500px;
      margin: 0 auto;
    }

    .button {
      flex: 0 0 auto;
      width: auto;
      min-width: 120px;
      max-width: 180px;
      padding: 14px 28px;
      font-size: 16px;
      min-height: 50px;
    }

    h1 {
      font-size: 28px;
      margin-bottom: 30px;
    }

    #hero {
      gap: 25px;
    }
  }
</style>
